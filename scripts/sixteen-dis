#!/usr/bin/env python
# -*- coding: utf-8 -*-
"A simple disassembler."

import sys
import argparse
import re
from sixteen.dis import Disassembler
from sixteen.debugger import Debugger, ColoredDebugger
from sixteen.utilities import HexRead, file_to_ram, OpcodeError


parser = argparse.ArgumentParser(
	description='Disassemble a DCPU-16 binary.'
)

parser.add_argument('--little', '-l', dest="big_endian", action='store_false', 
	help="Denote that this file should be parsed as little-endian. "
	"(Default: big-endian).",
)

parser.add_argument('--hex', dest="bin", action='store_false', 
	help="Denote that this file should be parsed as an ASCII hex dump. "
	"(Default: binary)"
)

parser.add_argument('--addresses', '-a', action='store_true',
    help="Add the starting address for each instruction in a comment."
)

parser.add_argument('file',
	help="The binary file to step through."
)


args = parser.parse_args()


# open the file from the command-line
if args.bin:
	f = open(args.file)
else:
	f = HexRead(args.file)

# initialize a new (disassembling) CPU
d = Disassembler()


# read the file to the CPU's RAM
file_to_ram(f, d, args.big_endian)

# close the file
f.close


for assembly, address in d.dis():
    if args.addresses:
        print "%-20s ; 0x%04x" % (assembly, address)
    else:
        print assembly
